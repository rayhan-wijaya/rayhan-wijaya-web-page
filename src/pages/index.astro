---
import PageContainer from "../components/PageContainer.astro";
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>rayhan wijaya</title>

        <style>
            body {
                @apply font-mono dark:bg-zinc-900 dark:text-white;
            }
        </style>
    </head>

    <body>
        <PageContainer>
            <h1 class="text-xl text-center font-black">
                welcome to my page. i'm rayhan wijaya
            </h1>

            <div class="p-3"></div>

            <section class="py-3">
                <h2 class="text-center font-black">about me</h2>

                <div class="p-3"></div>

                <p class="text-center">
                    hi i'm rayhan. a 13 y\o hobbyist programmer, writer, and
                    neovim advocate. i love what i do, so i just... can't...
                    stop..!
                </p>

                <div class="p-3"></div>

                <p class="text-center">
                    i primarily write <b>typescript</b>, some <b>lua</b>,
                    <b>rust</b>, <b>latex</b> and <b>groff\troff</b>. i write in
                    other languages too. i'm having a bit of fun memeing while
                    i'm at it. i also tutor and consult in a legacy react
                    codebase on the side since i want to save for college.
                </p>
            </section>

            <section class="py-3">
                <h2 class="text-center font-black">
                    my side <i>proe</i>-jects
                </h2>

                <div class="p-3"></div>

                <div class="flex flex-col gap-6">
                    <div class="p-3 bg-zinc-100 dark:bg-zinc-800">
                        <div class="flex gap-3">
                            <h3 class="font-black">base-ui</h3>
                            <span class="text-sky-400 dark:text-sky-300">
                                Luau
                            </span>
                        </div>

                        <div class="p-3"></div>

                        <p>
                            a simple, extendable UI builder for luau,
                            establishing primitives without bringing in a
                            memory-hogging solution like a virtual dom. as a
                            result of that, base-ui encourages the use of refs.
                        </p>

                        <div class="p-3"></div>

                        <p>
                            it also allows init hooks, allowing you to run
                            events everytime an element/primitive is
                            initialized, allowing modifications to the element.
                            the built-in tailwind module for base-ui makes use
                            of this feature.
                        </p>

                        <div class="p-3"></div>

                        <p>
                            base-ui also exposes its core library, containing
                            functions like assigning refs given to elements or
                            assigning given props to elements. this allows the
                            ease of tapping into underlying BaseUI stuff for
                            creating custom elements/primitives. it additionally
                            provides helpful utility functions though its
                            utility library like map() or generateCreateRef().
                        </p>

                        <div class="p-3"></div>

                        <p>its syntax:</p>

                        <div class="p-3"></div>

                        <pre
                            class="overflow-x-scroll p-3 bg-zinc-200 dark:bg-zinc-900">{
`
local player = game.Players.LocalPlayer
local playerGui = player.PlayerGui

local baseUi = game.ReplicatedStorage.Common.BaseUI

local gui = require(baseUi.GUI)
local initTailwind = require(baseUi.OptionalModules.TailwindIntegration)

initTailwind()

local function inventoryItem(props: { itemName: string })
    return (
        gui.frame({ Styles = "w-1/2 h-1/2 bg-red-300", Name = "InventoryItem" }, {
            Instance.new("TextLabel"), -- interopt with non-base-ui elements

            gui.textLabel({ Styles = "text-scaled", Name = "InventoryItemName" }, {
                props.itemName, -- text nodes!
            })
        })
    )
end

local screenGui = gui.screenGui({}, {
    inventoryItem({ itemName = "Axe" }),
})

screenGui.Parent = playerGui`}</pre>

                        <div class="p-3"></div>

                        <p>custom tailwind styles are possible too</p>

                        <div class="p-3"></div>

                        <pre
                            class="overflow-x-scroll p-3 bg-zinc-200 dark:bg-zinc-900">{
`
local baseUi = game.ReplicatedStorage.Common.BaseUI
local tailwindIntegrationTypes = require(baseUi.OptionalModules.TailwindIntegration.Types)

local tailwindConfig = {}

local customStyleMappings = {
    -- Custom style mappings
    -- e.g.
    ["bg-transparent"] = { BackgroundTransparency = 0 },

    -- you can even use functions, which take in the actual
    -- primitive/element that's being styled! very useful for reading
    -- a value from the element
    --
    -- an example for this use case would be UDim2-related styles
    -- since you can't directly mutate the value of a UDim2 but instead
    -- create a new UDim2 value from the existing values.
    --
    -- e.g.
    ["w-full"] = {
        Size = function (guiItem: baseUiTypes.GuiItem)
            return UDim2.new(1, guiItem.Size.X.Offset, guiItem.Size.Y.Scale, guiItem.Size.Y.Offset)
        end
    },
    ["w-1/2"] = {
        Size = function (guiItem: baseUiTypes.GuiItem)
            return UDim2.new(1/2, guiItem.Size.X.Offset, guiItem.Size.Y.Scale, guiItem.Size.Y.Offset)
        end
    },
}

tailwindConfig.customStyleMappings = customStyleMappings
return tailwindConfig
`}</pre>

                        <div class="p-3"></div>

                        <p>
                            i spent a bit of time on this project, mostly on the
                            tailwind integration. so i hope you found it
                            interesting.
                        </p>

                        <div class="p-3"></div>

                        <a href="https://github.com/rayhan-wijaya/base-ui">
                            <div
                                class="p-3 w-full text-center bg-zinc-500 text-white dark:bg-black"
                            >
                                base-ui on github
                            </div>
                        </a>
                    </div>

                    <div class="p-3 bg-zinc-100 dark:bg-zinc-800">
                        <div class="flex gap-3">
                            <h3 class="font-black">hmark</h3>
                            <span class="text-orange-400 dark:text-orange-300">
                                Rust
                            </span>
                        </div>

                        <div class="p-3"></div>

                        <p>
                            a straightforward crytographic bookmarking utility
                            that can encrypt\decrypt bookmarks with "password
                            keys", which are inputted by the user. available as
                            a terminal program. you can have private bookmarks
                            with this and view your bookmarks in your default
                            browser using `view` with the web flag `-w`.
                        </p>

                        <div class="p-3"></div>

                        <pre
                            class="overflow-x-scroll p-3 bg-zinc-200 dark:bg-zinc-900">{
`
$ hmark set -k gitlab_home -u https://gitlab.com
$ hmark set -k hmark       -u https://github.com/rayhan-wijaya/hmark

$ hmark view gitlab_home
https://gitlab.com

$ hmark view -w gitlab_home
(browser session)

$ hmark list
hmark
gitlab_home

$ hmark rm gitlab_home hmark
`}</pre>

                        <div class="p-3"></div>

                        <p>
                            bookmarks you create will be stored in the
                            ~/.hmark/bookmarks folder underneath hmark's
                            dotfolder, where tilde, is of course, your home
                            directory.
                        </p>

                        <div class="p-3"></div>

                        <p>
                            an exemplary bookmarks folder would be outlined
                            like:
                        </p>

                        <div class="p-3"></div>

                        <pre
                            class="overflow-x-scroll p-3 bg-zinc-200 dark:bg-zinc-900">{
`
* ~/.hmark/bookmarks/
    |  ffmpeg_docs  -> https://ffmpeg.org/ffmpeg.html/
    |  diesel_docs  -> https://docs.rs/diesel/latest/diesel/
    |  a_cool_tweet -> https://twitter.com/Neovim/status/1671419524854210560/
`}</pre>

                        <div class="p-3"></div>

                        <a href="https://github.com/rayhan-wijaya/hmark">
                            <div class="p-3 w-full text-center bg-zinc-500 text-white dark:bg-black">
                                hmark on github
                            </div>
                        </a>
                    </div>
                </div>
            </section>
        </PageContainer>
    </body>
</html>
